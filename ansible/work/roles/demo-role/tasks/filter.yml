---

#### FILTERS ####
# Filters are used for data processing, extraction, transformation, and manipulation
# If you are an environment of ansible-core >= 2.10 you can get a list of lookups plugins ansible knows about by running:
#   ansible-doc -t filter --list


- name: "Set a default value for a variable"
  ansible.builtin.set_fact:
    external_variable: "{{ EXTERNAL_VARIABLE | default('this external variable was not defined') }}"
    # This filter will set a default value for a variable if that variable was not defined according to the jinja-tests.defined() function call
    # Filter Docs: https://jinja.palletsprojects.com/en/stable/templates/#jinja-filters.default
    # Jinja-tests docs: https://jinja.palletsprojects.com/en/stable/templates/#jinja-tests.defined


- name: "Check if a value is treated as true by ansible/python"
  vars:
    mystring: ""
  ansible.builtin.fail:
  # THis module automatically fails if a given expressino evaulates to true
  # Module docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fail_module.html
    msg: "Conditional failure triggered"
  when: mystring | ansible.builtin.bool
  # The bool filter type casts the given value to a boolean.
  # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/bool_filter.html
  # In this case in python/ansible empty strings get evaluated as false
  # Python truthy/falsy documentation: PLACEHOLDER

- name: "Base 64 encode a value"
  ansible.builtin.set_fact:
    b64_encoded_string: "{{ 'hello there' | ansible.builtin.b64encode }}"
  # The b64encode filter tages a given input (can be anything, even raw binary) and base64 encodes it according to RFC 4648
  # RFC Docs:https://datatracker.ietf.org/doc/html/rfc4648
  # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/b64encode_filter.html

- name: "Base 64 decode a value"
  ansible.builtin.set_fact:
    b64_decoded_string: "{{ 'hello there' | ansible.builtin.b64decode }}"
  # The b64encode filter tages a given input (must be valid b64 encoded string) and base64 decodes it according to RFC 4648
  # RFC Docs:https://datatracker.ietf.org/doc/html/rfc4648
  # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/b64decode_filter.html

- name: "Debug encoded and decoded strings"
  ansible.builtin.debug:
  # This module simply prints out messages/variables to stdout
  # Module Docs https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debug_module.html
    msg: |
      Encoded value: "{{ b64_encoded_string }}"
      Decoded value: "{{ b64_decoded_string }}"
    # the pip ('|') symbol here for yaml indicates a block scalar, telling the parser that everything underneath the msg block up until the first unindented line is to be breated as a multi line string where whitepace including new lines is preserverd
    # Block scalar documentation: https://yaml-multiline.info/#:~:text=Block%20Scalars,-A%20block%20scalar&text=If%20you%20would%20like%20them,by%20putting%20two%20newlines%20in.

- name: "Get absolute filepaths for role files"
  vars:
    mypath: "{{ role_path }}/files/file.txt"
  ansible.builtin.set_fact:
    dirname: "{{ mypath | ansible.builtin.dirname }}"
    # This filter gets the full path to the parent diretory of the path passed to it
    # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dirname_filter.html
    basername: "{{ mypath | ansible.builtin.basename }}"
    # This filter gets the name of the laft path element passed to it (final file/direcory name"
    # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/basename_filter.html

- name: "Debug our new variables"
  ansible.builtin.debug:
    msg: |
      Directory path: "{{ dirname }}"
      File name: "{{ basename }}"

- name: "Extract information from json and yaml files"
  ansible.builtin.set_fact:
    yaml_vars: "{{ ansible.builtin.lookup('file', role_path ~ '/files/info.yml') | ansible.builtin.from_yaml }}"
    # The from_yaml filter will attempt to convert given input into a proper variable structure using the yaml serializer
    # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/from_yaml_filter.html
    json_vars: "{{ ansible.builtin.lookup('file', role_path ~ '/files/info.json') | ansible.builtin.from_json }}"
    # The from_json filter will attempt to convert given input into a proper variable structure using the json serializer
    # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/from_json_filter.html
    #


- name: "Set generic list and dictionary for use in later transformations"
  ansible.builtin.set_fact:
    # Detine a list of key-value pairs (necessary for items2dict)
    myitems:
      - key: 'one'
        value: 1
      - key: 'two'
        value: 2
      - key: 'three'
        value: 3
    # Devine a dictionary to convert into a list
    my_dict:
      four: 4
      five: 5
      six: 6


- name: "Convert items to dictionary and vice versa"
  ansible.builtin.set_fact:
    myitems2dict: "{{ myitems | ansible.builtin.items2dict }}"
    # The ansible.builtin.items2dict takes a list of dictionaries with a key and a value entry, ant combines all those into one dictionary
    # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/items2dict_filter.html
    mydict2items: "{{ mydict | ansible.builtin.dict2items }}"
    # The ansible.builtin.dict2items takes a dictionary and converts it to a list of dictionaries with a key and value entry (literal inverse of items2dict
    # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dict2items_filter.html

- name: "Debug transformed data structures"
  ansible.builtin.debug:
    msg: |
      Transformed list: {{ myitems2dict | to_nice_json(indent=2) }}
      Transformed dict: {{ mydict2itmes | to_nice_json(indent=2) }}
    # The to_nice_json filter takes an ansible data structure and pertty formats it to json with the supplied indent (default is 4)
    # A similar filter called to_nice_yaml also exists and does the same thing but outputs yaml and also takes an optional indentadion argument

- name: "Some REGEX searching/replacing operations"
  vars:
    # Create sentence to demonstrate regex use cases
    mysentence: "The brown fox quick brown fox jumps over the lazy fox dog"
  ansible.builtin.set_fact:
    search_result: "{{ mysentence | ansible.builtin.regex_search('\\(?<=brown\\s+\\)fox\\(?=\\s+\\)\\(?!\\s+quick\\)') }}"
    # The ansible.builtin.regex_search filter returns the first instance of a regex pattern found in a string
    # This usage is only extracting for then it is preceeded by 'brown ' and follwed by a space that is not followed wy the word quick (this results in it finding only the second 'fox' occurence in the used string
    # You can also remove all the escapes and pass this through ansible.builtin.regex_escape
    # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/regex_search_filter.html
    findall_result: "{{ mysentence | ansible.builtin.regex_findall('fox') }}"
    # The ansible.builtin.regex_findall filter finds *all* instances matching a regex pattern in a string (returns a list of matches)
    # This case will return all 3 occurences of fox in the provided string
    # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/regex_findall.html
    replace_result: "{{ mysentence | ansible.builtin.regex_replace('fox', 'hound') }}"
    # The ansible.builtin.regex_replace filter replaces all instances of the pattern (first argument) with the replacement string
    # This case will replace all occurences of 'fox' with 'hound'
    # Filter docs: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/regex_replace.html


- name: "Debug our regex results"
  ansible.builtin.debug:
    msg: |
      search result: "{{ search_result }}"
      findall_result: "{{ findall_result }}"
      replace_result: "{{ replace_result }}"
























